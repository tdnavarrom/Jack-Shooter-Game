// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/Ball.jack

/**
 * A graphical ball. Characterized by a screen location and distance of 
 * last destination. Has methods for drawing, erasing and moving on the screen.
 * The ball is displayed as a filled, 6-by-6 pixles rectangle. 
 */
class Ball {

    field int x, y, velocity;               // the ball's screen location (in pixels)
    field boolean colided;

    /** Constructs a new ball with the given initial location and wall locations. */
    constructor Ball new(int Ax, int Ay, int vel) {    	
	    let x = Ax;		
	    let y = Ay;
	    let velocity = vel;
        let colided = false; 
        do show();
        return this;
    }

    /** Deallocates the Ball's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Shows the ball. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    /** Hides the ball. */
    method void hide() {
        do Screen.setColor(false);
	    do draw();
        return;
    }

    /** Draws the ball. */
    method void draw() {
	    do Screen.drawRectangle(x, y,x+2, y + 10);
	    return;
    }

    method boolean checkColition(int objY){
        let boolean colided = false;
        if(y==objY){
            let colided = true
        }
        return colided;
    }

    /**
     * Moves the ball one unit towards its destination.
     * If the ball has reached a wall, returns 0.
     * Else, returns a value according to the wall:
     * 1 (left wall), 2 (right wall), 3 (top wall), 4 (bottom wall).
     */
    method void move() {
        /** Mover hacia arriba, detectar colision o eliminar si llega a arriba.
	    do hide();
        let y = y-velocity;

        if(y<0){
            do hide();
        }
        else{
            do show();
        }

	    return;
    }

    method boolean hasColided(){
        return colided;
    }

}
